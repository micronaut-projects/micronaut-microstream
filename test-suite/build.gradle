plugins {
    id 'java-library'
    id "io.micronaut.internal.build.microstream-testsuite"
    id("io.micronaut.test-resources") version "4.0.0-M4"
}

dependencies {
    testAnnotationProcessor(platform(mn.micronaut.core.bom))
    testAnnotationProcessor(projects.micronautMicrostreamAnnotations)
    testAnnotationProcessor(mn.micronaut.inject.java)
    testAnnotationProcessor(mnValidation.micronaut.validation.processor)
    testAnnotationProcessor(mnSerde.micronaut.serde.processor)

    testImplementation(platform(mn.micronaut.core.bom))
    testImplementation(mnValidation.micronaut.validation)
    testImplementation(mnSerde.micronaut.serde.jackson)

    testImplementation(projects.micronautMicrostreamAnnotations)

    testImplementation(libs.jupiter.api)
    testImplementation(mnTest.micronaut.test.junit5)
    testRuntimeOnly(libs.junit.jupiter.engine)

    testRuntimeOnly(mnLogging.logback.classic)
    testRuntimeOnly(mn.snakeyaml)

    testImplementation(mn.micronaut.http.server.netty)
    testImplementation(mn.micronaut.http.client)
    testImplementation(projects.micronautMicrostream)
    testImplementation(projects.micronautMicrostreamCache)
    testImplementation(projects.micronautMicrostreamRest)
    testImplementation(libs.jupiter.jupiter.params)

    testImplementation(libs.managed.microstream.sql)
    testImplementation(mnSql.micronaut.jdbc.hikari)
    testRuntimeOnly(mnSql.postgresql)

    testImplementation(libs.managed.microstream.aws.s3)
    testImplementation(mnAws.micronaut.aws.sdk.v2)

    testRuntimeOnly(libs.managed.microstream.aws.dynamodb)

    testImplementation(libs.testcontainers)
    testImplementation(libs.testcontainers.junit.jupiter)
    testImplementation(projects.testSuiteUtils)
}

micronaut {
    importMicronautPlatform.set(false)
    testResources {
        enabled.set(true)
        additionalModules.add("jdbc-postgresql")
        additionalModules.add("localstack-s3")
    }
}
